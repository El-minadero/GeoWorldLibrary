package net.kevinmendoza.geoworldlibrary.geology.recursivegeology.node;

import net.kevinmendoza.geoworldlibrary.geology.recursivegeology.node.Prototype.*;
import static org.hamcrest.CoreMatchers.*;
import static org.junit.Assert.*;
import org.junit.Test;

import java.util.HashMap;
import javax.print.attribute.standard.RequestingUserName;
import org.spongepowered.api.data.manipulator.immutable.block.ImmutableDecayableData;
import org.spongepowered.api.data.manipulator.mutable.entity.IgniteableData;
import com.flowpowered.math.vector.Vector2i;
import com.flowpowered.math.vector.Vector3i;
import net.kevinmendoza.geoworldlibrary.geology.compositerockdata.IDecay;
import net.kevinmendoza.geoworldlibrary.geology.compositerockdata.IData;
import net.kevinmendoza.geoworldlibrary.geology.recursivegeology.cache.INodeRegion;
import net.kevinmendoza.geoworldlibrary.proceduralgeneration.pointmodification.IPointModifier;
import net.kevinmendoza.geoworldlibrary.proceduralgeneration.region.IRegion;
public class PrototypeTest {

	@Test
	public void type() throws Exception {
		// TODO auto-generated by JUnit Helper.
		assertThat(Prototype.class, notNullValue());
	}

	@Test
	public void instantiation() throws Exception {
		// TODO auto-generated by JUnit Helper.
		PrototypeBuilder builder = null;
		Prototype target = new Prototype(builder);
		assertThat(target, notNullValue());
	}

	@Test
	public void isLeaf_A$() throws Exception {
		// TODO auto-generated by JUnit Helper.
		PrototypeBuilder builder = null;
		Prototype target = new Prototype(builder);
		boolean actual = target.isLeaf();
		boolean expected = false;
		assertThat(actual, is(equalTo(expected)));
	}

	@Test
	public void getName_A$() throws Exception {
		// TODO auto-generated by JUnit Helper.
		PrototypeBuilder builder = null;
		Prototype target = new Prototype(builder);
		String actual = target.getName();
		String expected = null;
		assertThat(actual, is(equalTo(expected)));
	}

	@Test
	public void isInside_A$Vector2i() throws Exception {
		// TODO auto-generated by JUnit Helper.
		PrototypeBuilder builder = null;
		Prototype target = new Prototype(builder);
		Vector2i vector2i = null;
		boolean actual = target.isInside(vector2i);
		boolean expected = false;
		assertThat(actual, is(equalTo(expected)));
	}

	@Test
	public void isInside_A$Vector3i() throws Exception {
		// TODO auto-generated by JUnit Helper.
		PrototypeBuilder builder = null;
		Prototype target = new Prototype(builder);
		Vector3i vector3i = null;
		boolean actual = target.isInside(vector3i);
		boolean expected = false;
		assertThat(actual, is(equalTo(expected)));
	}

	@Test
	public void getCenterDistance_A$Vector3i() throws Exception {
		// TODO auto-generated by JUnit Helper.
		PrototypeBuilder builder = null;
		Prototype target = new Prototype(builder);
		Vector3i vector3i = null;
		double actual = target.getCenterDistance(vector3i);
		double expected = 0.0;
		assertThat(actual, is(equalTo(expected)));
	}

	@Test
	public void getCenterDistance_A$Vector2i() throws Exception {
		// TODO auto-generated by JUnit Helper.
		PrototypeBuilder builder = null;
		Prototype target = new Prototype(builder);
		Vector2i vector2i = null;
		double actual = target.getCenterDistance(vector2i);
		double expected = 0.0;
		assertThat(actual, is(equalTo(expected)));
	}

	@Test
	public void getLocationData_A$Vector3i() throws Exception {
		// TODO auto-generated by JUnit Helper.
		PrototypeBuilder builder = null;
		Prototype target = new Prototype(builder);
		Vector3i vec3 = null;
		String actual = target.getLocationData(vec3);
		String expected = null;
		assertThat(actual, is(equalTo(expected)));
	}

	@Test
	public void getRandomInternalPoint2i_A$() throws Exception {
		// TODO auto-generated by JUnit Helper.
		PrototypeBuilder builder = null;
		Prototype target = new Prototype(builder);
		Vector2i actual = target.getRandomInternalPoint2i();
		Vector2i expected = null;
		assertThat(actual, is(equalTo(expected)));
	}

	@Test
	public void getRandomInternalPoint3i_A$() throws Exception {
		// TODO auto-generated by JUnit Helper.
		PrototypeBuilder builder = null;
		Prototype target = new Prototype(builder);
		Vector3i actual = target.getRandomInternalPoint3i();
		Vector3i expected = null;
		assertThat(actual, is(equalTo(expected)));
	}

	@Test
	public void getData_A$Vector2i() throws Exception {
		// TODO auto-generated by JUnit Helper.
		PrototypeBuilder builder = null;
		Prototype target = new Prototype(builder);
		Vector2i vector2i = null;
		IData actual = target.getData(vector2i);
		IData expected = null;
		assertThat(actual, is(equalTo(expected)));
	}

	@Test
	public void getData_A$Vector3i() throws Exception {
		// TODO auto-generated by JUnit Helper.
		PrototypeBuilder builder = null;
		Prototype target = new Prototype(builder);
		Vector3i vector3i = null;
		IData actual = target.getData(vector3i);
		IData expected = null;
		assertThat(actual, is(equalTo(expected)));
	}

}

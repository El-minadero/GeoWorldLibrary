package net.kevinmendoza.geoworldlibrary.geology.recursivegeology.cache;

import net.kevinmendoza.geoworldlibrary.geology.recursivegeology.cache.NodeCache.*;
import static org.hamcrest.CoreMatchers.*;
import static org.junit.Assert.*;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import com.flowpowered.math.vector.Vector2i;
import com.flowpowered.math.vector.Vector3i;
import net.kevinmendoza.geoworldlibrary.geology.compositerockdata.Comparison;
import net.kevinmendoza.geoworldlibrary.geology.recursivegeology.factory.AbstractPrototypeFactory;
import net.kevinmendoza.geoworldlibrary.geology.recursivegeology.factory.INodeFactory;
import net.kevinmendoza.geoworldlibrary.geology.recursivegeology.node.INode;
import net.kevinmendoza.geoworldlibrary.geology.recursivegeology.node.INodeBuilder;
import net.kevinmendoza.geoworldlibrary.proceduralgeneration.pointgeneration.IPointGenerator;
import net.kevinmendoza.geoworldlibrary.proceduralgeneration.region.IRegion;
public class NodeCacheTest {

	@Test
	public void type() throws Exception {
		// TODO auto-generated by JUnit Helper.
		assertThat(NodeCache.class, notNullValue());
	}

	@Test
	public void instantiation() throws Exception {
		
	}

	@Test
	public void populateKeyValue_A$Vector2i() throws Exception {
		
	}

	@Test
	public void getLocationString_A$Vector3i() throws Exception {
		
	}

	@Test
	public void getLocalKeys_A$Vector2i() throws Exception {
		
	}

	@Test
	public void getLocalKeys_A$Vector3i() throws Exception {
		
	}

	@Test
	public void getClosestNodesToLocation_A$Vector3i() throws Exception {
		
	}

	@Test
	public void populateIfNecessary_A$() throws Exception {
		
	}

}
